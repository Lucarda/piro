#ifndef __Z_MATRIX_MATH__
#define __Z_MATRIX_MATH__


#if defined (NT)
#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#endif


#include "m_types.h"


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////// Complex Matrix Structure  ////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


typedef struct _matrix_complex
{
  t_uint m_dim;
  t_uint n_dim;
  
  t_uint max_m_dim;
  t_uint max_n_dim;
  
  t_complex_sample *matrix_data;
  
} t_matrix_complex;


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////// Matrix Defines  /////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#define MATRIX_REF_COMPLEX(matrix) \
t_complex_sample *__##matrix##_data_ptr; \
t_uint __##matrix##_m_dim;


#define MATRIX_DEREF(matrix) \
__##matrix##_data_ptr = matrix->matrix_data; \
__##matrix##_m_dim = matrix->m_dim;


#define MATRIX_ELEMENT(matrix, m, n) __##matrix##_data_ptr[(m) + (__##matrix##_m_dim * (n))]


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////// Function Prototypes ///////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void matrix_destroy_complex(t_matrix_complex *matrix);
t_matrix_complex *matrix_alloc_complex(t_uint m_dim, t_uint n_dim);
long matrix_new_size_complex(t_matrix_complex *out, t_uint m_dim, t_uint n_dim);

void matrix_multiply_complex (t_matrix_complex *out, t_matrix_complex *in1, t_matrix_complex *in2);

long matrix_choelsky_decompose_complex(t_matrix_complex *out, t_matrix_complex *in);
void matrix_choelsky_solve_complex(t_matrix_complex *out, t_matrix_complex *decompose, t_matrix_complex *solve);
void matrix_conjugate_transpose_complex(t_matrix_complex *out, t_matrix_complex *in);


#endif    /* Z_MATRIX_MATH_ */
